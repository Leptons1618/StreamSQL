services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.2
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  kafka:
    image: confluentinc/cp-kafka:7.2.2
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
      - 29092:29092
    expose:
      - 29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-connect:
    image: debezium/connect:1.9
    ports:
      - 8083:8083
    depends_on:
      - kafka
    environment:
      BOOTSTRAP_SERVERS: kafka:29092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
      STATUS_STORAGE_TOPIC: connect_statuses
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
    
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    depends_on:
      - kafka
      - kafka-connect
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: FIRST
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://kafka-connect:8083
      DYNAMIC_CONFIG_ENABLED: "true"

  kafka-bridge:
    image: python:3.8-slim
    depends_on:
      - kafka
    working_dir: /app
    volumes:
      - ./:/app
    env_file:
      - .env
    environment:
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      MQTT_BROKER: ${MQTT_BROKER}
      MQTT_PORT: ${MQTT_PORT}
      MQTT_USERNAME: ${MQTT_USERNAME}
      MQTT_PASSWORD: ${MQTT_PASSWORD}
      MQTT_TOPIC: ${MQTT_TOPIC}
      TOPIC_NAME: ${TOPIC_NAME}
    command: >
      sh -c "python -m pip install --upgrade pip && pip install paho-mqtt pykafka && python kafkaHiveBroker.py"

  connector-init:
    image: alpine:latest
    depends_on:
      - kafka-ui
    env_file:
      - .env
    command: >
      sh -c "
        apk add --no-cache curl jq
        
        # Wait for base endpoint to be available first
        echo 'Waiting for Kafka Connect base endpoint...'
        until curl -s http://kafka-connect:8083/ >/dev/null 2>&1; do 
          echo 'Waiting for basic Kafka Connect API...'
          sleep 5
        done
        
        echo 'Creating connector configuration JSON...'
        echo '{
          \"name\": \"mssql-source-connector\",
          \"config\": {
            \"connector.class\": \"io.debezium.connector.sqlserver.SqlServerConnector\",
            \"database.hostname\": \"'${DB_HOSTNAME}'\",
            \"database.port\": \"'${DB_PORT}'\",
            \"database.user\": \"'${DB_USER}'\",
            \"database.password\": \"'${DB_PASSWORD}'\",
            \"database.dbname\": \"'${DB_NAME}'\",
            \"database.server.name\": \"'${DB_SERVER_NAME}'\",
            \"table.include.list\": \"'${TABLE_INCLUDE_LIST}'\",
            \"database.history.kafka.bootstrap.servers\": \"'${KAFKA_BOOTSTRAP_SERVERS}'\",
            \"database.history.kafka.topic\": \"'${HISTORY_TOPIC}'\",
            \"database.history.kafka.recovery.poll.interval.ms\": \"'${RECOVERY_POLL_INTERVAL_MS}'\",
            \"database.history.kafka.recovery.attempts\": \"'${RECOVERY_ATTEMPTS}'\",
            \"tasks.max\": \"'${TASKS_MAX}'\",
            \"snapshot.mode\": \"'${SNAPSHOT_MODE}'\",
            \"topic.creation.default.replication.factor\": '${TOPIC_CREATION_REPLICATION_FACTOR}',
            \"topic.creation.default.partitions\": '${TOPIC_CREATION_PARTITIONS}',
            \"topic.creation.enable\": '${TOPIC_CREATION_ENABLE}'
          }
        }' > /tmp/connector.json
        echo 'Connector JSON configuration created'
        echo 'Created connector.json:'
        cat /tmp/connector.json
        echo 'Sleeping for 10 seconds to allow Kafka Connect to stabilize...'
        sleep 10
        echo 'Registering connector with Kafka Connect...'
        curl -i -X POST -H \"Accept:application/json\" -H \"Content-Type:application/json\" --data @/tmp/connector.json http://kafka-connect:8083/connectors;
        echo 'Connector registration completed'
      "